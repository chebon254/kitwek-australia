generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  username        String?   @unique
  password        String?
  firstName       String?
  lastName        String?
  bio             String?   @db.Text
  proffession     String?
  phone           String?
  profileImage    String?
  memberNumber    String?   @unique
  membershipStatus String   @default("INACTIVE")
  subscription    String    @default("Free")
  revokeStatus    Boolean   @default(false)
  revokeReason    String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  stripeCustomerId String?  @unique
  tickets         Ticket[]
}

model AdminUser {
  id            String    @id
  email         String    @unique
  name          String?
  profileImage  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  blogs         Blog[]
  events        Event[]
  forums        Forum[]
  donations     Donation[]
  logs          AdminLog[]
  notifications AdminNotification[]
}

model AdminLog {
  id        String    @id @default(uuid())
  adminId   String
  action    String
  details   String    @db.Text
  createdAt DateTime  @default(now())
  admin     AdminUser @relation(fields: [adminId], references: [id])

  @@index([adminId])
}

model AdminNotification {
  id        String    @id @default(uuid())
  adminId   String
  type      String    // e.g., "NEW_USER", "NEW_DONATION", etc.
  message   String    @db.Text
  read      Boolean   @default(false)
  createdAt DateTime  @default(now())
  admin     AdminUser @relation(fields: [adminId], references: [id])

  @@index([adminId])
}

model Blog {
  id          String    @id @default(uuid())
  title       String
  description String    @db.Text
  thumbnail   String
  files       Json?     // Array of file URLs
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  adminId     String
  admin       AdminUser @relation(fields: [adminId], references: [id])

  @@index([adminId])
}

model Event {
  id            String    @id @default(uuid())
  title         String
  description   String    @db.Text
  thumbnail     String
  date          DateTime
  location      String
  capacity      Int       @default(0)
  remainingSlots Int      @default(0)
  isPaid        Boolean   @default(false)
  price         Float?
  status        String    @default("UPCOMING") // UPCOMING, ONGOING, COMPLETED, CANCELLED
  cancelReason  String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  adminId       String
  admin         AdminUser @relation(fields: [adminId], references: [id])
  tickets       Ticket[]
  attendees     EventAttendee[]

  @@index([adminId])
}

model Ticket {
  id            String    @id @default(uuid())
  eventId       String
  event         Event     @relation(fields: [eventId], references: [id])
  userId        String?   // Optional: for logged-in users
  user          User?     @relation(fields: [userId], references: [id])
  quantity      Int
  totalAmount   Float
  status        String    @default("ACTIVE") // ACTIVE, USED, CANCELLED, REFUNDED
  purchaseDate  DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  attendees     EventAttendee[]

  @@index([eventId])
  @@index([userId])
}

model EventAttendee {
  id          String   @id @default(uuid())
  eventId     String
  ticketId    String?  // Optional: for linking to ticket
  event       Event    @relation(fields: [eventId], references: [id])
  ticket      Ticket?  @relation(fields: [ticketId], references: [id])
  firstName   String
  lastName    String
  email       String
  phone       String?
  paid        Boolean  @default(false)
  amount      Float?
  createdAt   DateTime @default(now())

  @@index([eventId])
  @@index([ticketId])
}

model Forum {
  id          String    @id @default(uuid())
  title       String
  description String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  adminId     String
  admin       AdminUser @relation(fields: [adminId], references: [id])
  comments    ForumComment[]

  @@index([adminId])
}

model ForumComment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  forumId   String
  name      String
  email     String
  createdAt DateTime @default(now())
  forum     Forum    @relation(fields: [forumId], references: [id])

  @@index([forumId])
}

model Donation {
  id          String    @id @default(uuid())
  name        String
  description String    @db.Text
  thumbnail   String
  goal        Float?    // Optional fundraising goal
  endDate     DateTime? // Optional end date for the campaign
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  adminId     String
  admin       AdminUser @relation(fields: [adminId], references: [id])
  donors      Donor[]

  @@index([adminId])
}

model Donor {
  id         String   @id @default(uuid())
  name       String
  email      String
  amount     Float
  message    String?  @db.Text
  anonymous  Boolean  @default(false)
  donationId String
  createdAt  DateTime @default(now())
  donation   Donation @relation(fields: [donationId], references: [id])

  @@index([donationId])
}